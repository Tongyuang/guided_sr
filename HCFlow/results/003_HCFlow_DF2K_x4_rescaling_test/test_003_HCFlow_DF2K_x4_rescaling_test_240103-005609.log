24-01-03 00:56:09.080 - INFO:   name: 003_HCFlow_DF2K_x4_rescaling_test
  suffix: None
  use_tb_logger: True
  model: HCFlow_Rescaling
  distortion: sr
  scale: 4
  gpu_ids: [0]
  datasets:[
    test0:[
      name: example
      mode: GT
      dataroot_GT: ../datasets/Farm/HR
      phase: test0
      scale: 4
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: HCFlowNet_Rescaling
    in_nc: 3
    out_nc: 3
    act_norm_start_step: 100
    flowDownsampler:[
      K: 14
      L: 2
      squeeze: haar
      flow_permutation: none
      flow_coupling: Affine3shift
      nn_module: DenseBlock
      hidden_channels: 32
      cond_channels: None
      splitOff:[
        enable: True
        after_flowstep: [6, 6]
        flow_permutation: invconv
        flow_coupling: Affine
        stage1: True
        feature_extractor: RRDB
        nn_module: FCN
        nn_module_last: Conv2dZeros
        hidden_channels: 64
        RRDB_nb: [2, 1]
        RRDB_nf: 64
        RRDB_gc: 16
      ]
    ]
    scale: 4
  ]
  val:[
    heats: [1.0]
    n_sample: 1
  ]
  path:[
    strict_load: True
    load_submodule: None
    pretrain_model_G: ../experiments/pretrained_models/Rescaling_DF2K_X4_HCFlow.pth
    root: /data0/yuang/HCFlow
    results_root: /data0/yuang/HCFlow/results/003_HCFlow_DF2K_x4_rescaling_test
    log: /data0/yuang/HCFlow/results/003_HCFlow_DF2K_x4_rescaling_test
  ]
  is_train: False

24-01-03 00:56:09.082 - INFO: Dataset [GTDataset - example] is created.
24-01-03 00:56:09.082 - INFO: Number of test images in [example]: 1
24-01-03 00:56:09.679 - INFO: Network G structure: DataParallel - HCFlowNet_Rescaling, with parameters: 4,396,350
24-01-03 00:56:09.679 - INFO: HCFlowNet_Rescaling(
  (flow): FlowNet(
    (layers): ModuleList(
      (0): HaarDownsampling()
      (1): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (2): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(9, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(41, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(73, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(105, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(137, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (3): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (4): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(9, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(41, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(73, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(105, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(137, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (5): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (6): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(9, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(41, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(73, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(105, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(137, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (7): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (8): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(9, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(41, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(73, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(105, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(137, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (9): Split()
      (10): HaarDownsampling()
      (11): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (12): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(21, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(53, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(85, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(117, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(149, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (13): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (14): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(21, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(53, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(85, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(117, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(149, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (15): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (16): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(21, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(53, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(85, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(117, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(149, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (17): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(35, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(67, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(99, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(131, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (18): FlowStep(
        (actnorm): ActNorm2d()
        (affine): AffineCoupling3shift(
          (f): DenseBlock(
            (conv1): Conv2d(21, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(53, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(85, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(117, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(149, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (19): Split()
    )
    (level0_condFlow): ConditionalFlow(
      (conv_first): Conv2d(70, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RRDB_trunk0): Sequential(
        (0): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
        (1): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (RRDB_trunk1): Sequential(
        (0): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (trunk_conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (additional_flow_steps): ModuleList(
        (0): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (1): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (2): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (3): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (4): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (5): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                67, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
      )
      (f): Conv2dZeros(64, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (level1_condFlow): ConditionalFlow(
      (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (RRDB_trunk0): Sequential(
        (0): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
        (1): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (RRDB_trunk1): Sequential(
        (0): RRDB(
          (RDB1): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB2): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
          (RDB3): ResidualDenseBlock(
            (conv1): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv2): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv3): Conv2d(96, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv4): Conv2d(112, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (conv5): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
          )
        )
      )
      (trunk_conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (additional_flow_steps): ModuleList(
        (0): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (1): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (2): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (3): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (4): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
        (5): FlowStep(
          (actnorm): ActNorm2d()
          (permute): InvertibleConv1x1()
          (affine): AffineCoupling(
            (f): FCN(
              (conv1): Conv2d(
                74, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv2): Conv2d(
                64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
                (actnorm): ActNorm2d()
              )
              (conv3): Conv2dZeros(64, 22, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (relu): ReLU()
            )
          )
        )
      )
      (f): Conv2dZeros(64, 42, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)
24-01-03 00:56:09.680 - INFO: Loading model for G [../experiments/pretrained_models/Rescaling_DF2K_X4_HCFlow.pth] ...
24-01-03 00:56:11.706 - INFO: Model [HCFLowRescalingModel] is created.
24-01-03 00:56:12.095 - INFO: 

Testing [example]...
24-01-03 00:56:18.494 - INFO: Farm_image_2         (1samples),heat:1.0) HR:PSNR/SSIM/PSNR_Y/SSIM_Y/LPIPS/Diversity: 24.55/0.8259/25.98/0.8361/0.2922/nan, bicHR:PSNR/SSIM/PSNR_Y/SSIM_Y: 40.25/0.9932/46.13/0.9978, LR:PSNR/SSIM/PSNR_Y/SSIM_Y: 25.92/0.8014/33.83/0.9578, NLL: 0.0178
24-01-03 00:56:18.494 - INFO: -------------------------------------------------------------------------------------
24-01-03 00:56:18.494 - INFO: ../experiments/pretrained_models/Rescaling_DF2K_X4_HCFlow.pth
24-01-03 00:56:18.494 - INFO: ----example (1images,1samples,heat:1.0) average HR:PSNR/SSIM/PSNR_Y/SSIM_Y/LPIPS/Diversity: 24.55/0.8259/25.98/0.8361/0.2922/nan, bicHR:PSNR/SSIM/PSNR_Y/SSIM_Y: 40.25/0.9932/46.13/0.9978, LR:PSNR/SSIM/PSNR_Y/SSIM_Y: 25.92/0.8014/33.83/0.9578, NLL: 0.0178
